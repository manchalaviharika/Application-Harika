import pygame
import sys
import random

pygame.init()

WIDTH, HEIGHT = 600, 400
win = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Subway Surfers Lite")

clock = pygame.time.Clock()
FPS = 60

# Colors
WHITE = (255, 255, 255)
GRAY = (50, 50, 50)
RED = (200, 30, 30)
BLUE = (30, 30, 200)
GREEN = (30, 200, 30)

# Lanes setup (3 lanes horizontally)
lanes_x = [150, 300, 450]

# Player setup
player_width, player_height = 40, 60
player_lane = 1  # start in middle lane
player_x = lanes_x[player_lane] - player_width // 2
player_y = HEIGHT - player_height - 30
player_rect = pygame.Rect(player_x, player_y, player_width, player_height)

# Jump mechanics
is_jumping = False
jump_vel = 15
gravity = 1
vel_y = 0

# Obstacles setup
obstacle_width, obstacle_height = 40, 60
obstacle_speed = 8
obstacles = []

# Font for score and messages
font = pygame.font.SysFont("consolas", 32)

score = 0
game_over = False

def spawn_obstacle():
    lane = random.randint(0, 2)
    x = lanes_x[lane] - obstacle_width // 2
    y = -obstacle_height
    rect = pygame.Rect(x, y, obstacle_width, obstacle_height)
    obstacles.append(rect)

SPAWN_EVENT = pygame.USEREVENT + 1
pygame.time.set_timer(SPAWN_EVENT, 1500)  # spawn obstacle every 1.5 seconds

def reset_game():
    global obstacles, player_lane, player_rect, is_jumping, vel_y, score, game_over
    obstacles = []
    player_lane = 1
    player_rect.x = lanes_x[player_lane] - player_width // 2
    player_rect.y = player_y
    is_jumping = False
    vel_y = 0
    score = 0
    game_over = False

while True:
    clock.tick(FPS)
    win.fill(GRAY)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if not game_over:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT and player_lane > 0:
                    player_lane -= 1
                    player_rect.x = lanes_x[player_lane] - player_width // 2
                elif event.key == pygame.K_RIGHT and player_lane < 2:
                    player_lane += 1
                    player_rect.x = lanes_x[player_lane] - player_width // 2
                elif event.key == pygame.K_SPACE and not is_jumping:
                    is_jumping = True
                    vel_y = -jump_vel
            if event.type == SPAWN_EVENT:
                spawn_obstacle()
        else:
            if event.type == pygame.KEYDOWN and event.key == pygame.K_r:
                reset_game()

    if not game_over:
        # Jump physics
        if is_jumping:
            player_rect.y += vel_y
            vel_y += gravity
            if player_rect.y >= player_y:
                player_rect.y = player_y
                is_jumping = False

        # Move obstacles
        for obs in obstacles[:]:
            obs.y += obstacle_speed
            if obs.y > HEIGHT:
                obstacles.remove(obs)
                score += 1  # increase score for avoided obstacle

        # Draw player
        pygame.draw.rect(win, BLUE, player_rect)

        # Draw obstacles
        for obs in obstacles:
            pygame.draw.rect(win, RED, obs)

        # Collision detection
        for obs in obstacles:
            if player_rect.colliderect(obs):
                game_over = True

        # Draw score
        score_text = font.render(f"Score: {score}", True, WHITE)
        win.blit(score_text, (10, 10))

    else:
        # Game over screen
        go_text = font.render("Game Over! Press R to Restart", True, WHITE)
        win.blit(go_text, (WIDTH // 2 - go_text.get_width() // 2, HEIGHT // 2 - go_text.get_height() // 2))

    pygame.display.flip()
